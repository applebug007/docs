{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://www.scam.ai/api/process"
    },
    {
      "url": "http://3.82.54.197:3001",
      "description": "Registration and Authentication Server"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check the health status of the AI detection service",
        "operationId": "healthCheck",
        "responses": {
          "default": {
            "description": "Health check response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/faceswap/health": {
      "get": {
        "summary": "Faceswap Health Check",
        "description": "Check the health status of the Faceswap Detection service.",
        "operationId": "faceswapHealthCheck",
        "responses": {
          "default": {
            "description": "Faceswap health check response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "models_loaded": {
                      "type": "boolean",
                      "example": true
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    },
                    "uptime_seconds": {
                      "type": "number",
                      "example": 3600
                    },
                    "memory_usage": {
                      "type": "object",
                      "properties": {
                        "total_mb": { "type": "number", "example": 2048 },
                        "used_mb": { "type": "number", "example": 1024 },
                        "available_mb": { "type": "number", "example": 1024 }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/predict": {
      "post": {
        "summary": "Detect deepfakes or analyze for scam-related content",
        "description": "This endpoint receives an image file and processes it to detect deepfake faces.",
        "operationId": "processImage",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file to be processed."
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Image analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fakeness_by_face": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The likelihood of fakeness for each face in the image, ranging from 0 (real) to 1 (fake).",
                        "minimum": 0,
                        "maximum": 1
                      }
                    },
                    "face_coordinates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "x": {
                            "type": "number",
                            "description": "The X coordinate of the face."
                          },
                          "y": {
                            "type": "number",
                            "description": "The Y coordinate of the face."
                          },
                          "width": {
                            "type": "number",
                            "description": "The width of the face bounding box."
                          },
                          "height": {
                            "type": "number",
                            "description": "The height of the face bounding box."
                          }
                        }
                      }
                    }
                  },
                  "required": ["fakeness_by_face", "face_coordinates"]
                }
              }
            }
          }
        }
      }
    },
     "/faceswap/attack": {
      "post": {
        "summary": "Simulate Faceswap Attack",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSwapAttackRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Faceswap result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceSwapAttackResponse"
                }
              }
            }
          }
        }
      }
    },
    "/voice/attack": {
      "post": {
        "summary": "Clone voice from sample and text",
        "description": "Takes an uploaded voice sample and synthesizes speech from the given text.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "audioFile": {
                    "type": "string",
                    "format": "binary",
                    "description": "Input audio file (e.g. .mp3 or .wav)"
                  },
                  "text": {
                    "type": "string",
                    "description": "Text to synthesize using the cloned voice"
                  }
                },
                "required": ["audioFile", "text"]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Voice cloning result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Voice cloning successful"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "audio": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "base64"
                            },
                            "payload": {
                              "type": "string",
                              "format": "byte",
                              "description": "Base64-encoded synthesized audio"
                            }
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "size_bytes": {
                              "type": "integer",
                              "example": 11329
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/faceswap/detect": {
      "post": {
        "summary": "Detect Faceswap in Image",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetectionRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Detection result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/detect-url": {
      "post": {
        "summary": "URL Detection",
        "description": "Detect malicious, phishing, or suspicious URLs using ML models and Google Web Risk API",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL to analyze for maliciousness",
                    "example": "https://suspicious-website.com"
                  }
                },
                "required": ["url"]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "URL analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "The analyzed URL"
                    },
                    "final_verdict": {
                      "type": "string",
                      "enum": ["benign", "malicious"],
                      "description": "Final detection verdict"
                    },
                    "confidence": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "description": "Confidence score (0.0 to 1.0)"
                    }
                  },
                  "example": {
                    "url": "https://suspicious-website.com",
                    "final_verdict": "malicious",
                    "confidence": 0.87
                  }
                }
              }
            }
          }
        }
      }
    },
    "/voice/detect": {
      "post": {
        "summary": "Detect Voice Deepfake",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetectionRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Detection result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/document/detect": {
      "post": {
        "summary": "Detect Fraud in Document",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetectionRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Fraud detection result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ai-content/detect": {
      "post": {
        "summary": "Detect AI-Generated Text",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIContentDetectionRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "AI content detection result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIContentDetectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ai-agent/process": {
      "post": {
        "summary": "Process AI Agent Audio Call",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAgentProcessRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "AI agent response result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIAgentProcessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ai-agent": {
      "post": {
        "summary": "AI Agent Text Analysis",
        "description": "Submit a text prompt for analysis or generation by an AI agent. Returns a generated response, confidence score, and processing time.",
        "operationId": "aiAgentTextAnalysis",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AI agent response result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (missing or invalid parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "examples": {
                  "No Prompt Provided": { "value": { "detail": "No prompt provided", "status": 400 } },
                  "Invalid Temperature": { "value": { "detail": "Temperature must be between 0.0 and 1.0", "status": 400 } }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error (processing error)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "AI agent processing failed", "status": 500 }
              }
            }
          }
        }
      }
    },
    "/detect": {
      "post": {
        "summary": "AI Image Detection - Base64",
        "description": "Detect AI-generated images using base64 encoded image data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task_id": {
                    "type": "string",
                    "description": "Unique identifier for the detection task"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "usecase_environment": {
                    "type": "object",
                    "properties": {
                      "threshold": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  },
                  "ai_model_info": {
                    "type": "object",
                    "properties": {
                      "model_name": {
                        "type": "string",
                        "default": "patchcraft"
                      },
                      "model_version": {
                        "type": "string",
                        "default": "v0.1"
                      }
                    }
                  },
                  "data": {
                    "type": "object",
                    "required": ["type", "payload"],
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "image"
                      },
                      "payload": {
                        "type": "string",
                        "description": "Base64-encoded image data"
                      }
                    }
                  }
                },
                "required": ["data"]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "AI detection result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task_id": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "completed"
                        },
                        "confidence_score": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        },
                        "likely_ai_generated": {
                          "type": "boolean"
                        },
                        "processing_time_ms": {
                          "type": "number"
                        },
                        "model_info": {
                          "type": "object"
                        },
                        "image_metadata": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plants": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          }
        }
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Plant deleted",
            "content": {}
          }
        }
      }
    },
    "/url-detection": {
      "post": {
        "summary": "Detect malicious or phishing URLs",
        "description": "Analyze a URL for phishing, malware, or scam risks and return a verdict and confidence score.",
        "operationId": "detectUrl",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL to analyze for threats.",
                    "example": "https://suspicious-website.com"
                  },
                  "threshold": {
                    "type": "number",
                    "description": "Detection sensitivity threshold (0.0 to 1.0)",
                    "default": 0.5,
                    "example": 0.5
                  }
                },
                "required": ["url"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "URL analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": { "type": "string", "description": "The URL that was analyzed." },
                    "final_verdict": { "type": "string", "description": "Detection result: 'benign' or 'malicious'" },
                    "confidence_score": { "type": "number", "description": "Detection confidence score (0.0 to 1.0)" },
                    "processing_time_ms": { "type": "number", "description": "Time taken to process the URL in milliseconds." }
                  },
                  "required": ["url", "final_verdict", "confidence_score", "processing_time_ms"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (missing or invalid parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "examples": {
                  "No URL Provided": { "value": { "detail": "No URL provided", "status": 400 } },
                  "Invalid Threshold": { "value": { "detail": "Threshold must be between 0.0 and 1.0", "status": 400 } }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (invalid URL format)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "Invalid URL format", "status": 422 }
              }
            }
          },
          "500": {
            "description": "Internal Server Error (processing error)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "URL processing failed", "status": 500 }
              }
            }
          }
        }
      }
    },
    "/batch-url-detection": {
      "post": {
        "summary": "Batch URL Detection",
        "description": "Analyze multiple URLs for phishing, malware, or scam risks in a single request. Returns a verdict and confidence score for each URL.",
        "operationId": "batchDetectUrls",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "urls": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Array of URLs to analyze.",
                    "example": ["https://safe-site.com", "https://phishing-site.com"]
                  },
                  "threshold": {
                    "type": "number",
                    "description": "Detection sensitivity threshold (0.0 to 1.0)",
                    "default": 0.5,
                    "example": 0.5
                  }
                },
                "required": ["urls"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Batch URL analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": { "type": "string", "description": "The URL that was analyzed." },
                          "final_verdict": { "type": "string", "description": "Detection result: 'benign' or 'malicious'" },
                          "confidence_score": { "type": "number", "description": "Detection confidence score (0.0 to 1.0)" },
                          "processing_time_ms": { "type": "number", "description": "Time taken to process the URL in milliseconds." }
                        },
                        "required": ["url", "final_verdict", "confidence_score", "processing_time_ms"]
                      }
                    }
                  },
                  "required": ["results"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (missing or invalid parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "examples": {
                  "No URLs Provided": { "value": { "detail": "No URLs provided", "status": 400 } },
                  "Invalid Threshold": { "value": { "detail": "Threshold must be between 0.0 and 1.0", "status": 400 } }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (invalid URL format)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "One or more URLs are invalid", "status": 422 }
              }
            }
          },
          "500": {
            "description": "Internal Server Error (processing error)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "Batch URL processing failed", "status": 500 }
              }
            }
          }
        }
      }
    },
    "/qr-code-detection": {
      "post": {
        "summary": "Detect malicious or phishing QR codes",
        "description": "Upload a QR code image for threat analysis. The service decodes the QR code and checks the destination for phishing, malware, or scam risks.",
        "operationId": "detectQRCode",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The QR code image file to be analyzed."
                  },
                  "threshold": {
                    "type": "number",
                    "description": "Detection sensitivity threshold (0.0 to 1.0)",
                    "default": 0.5,
                    "example": 0.5
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "QR code analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "decoded_url": { "type": "string", "description": "The URL extracted from the QR code." },
                    "final_verdict": { "type": "string", "description": "Detection result: 'benign' or 'malicious'" },
                    "confidence_score": { "type": "number", "description": "Detection confidence score (0.0 to 1.0)" },
                    "processing_time_ms": { "type": "number", "description": "Time taken to process the QR code in milliseconds." }
                  },
                  "required": ["decoded_url", "final_verdict", "confidence_score", "processing_time_ms"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (missing or invalid parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "examples": {
                  "No File Provided": { "value": { "detail": "No file provided", "status": 400 } },
                  "Invalid Threshold": { "value": { "detail": "Threshold must be between 0.0 and 1.0", "status": 400 } }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large (file too large)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "File size exceeds maximum limit", "status": 413 }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type (invalid image format)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "Unsupported image format", "status": 415 }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (invalid QR code)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "Could not decode QR code", "status": 422 }
              }
            }
          },
          "500": {
            "description": "Internal Server Error (processing error)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "QR code processing failed", "status": 500 }
              }
            }
          }
        }
      }
    },
    "/batch-qr-code-detection": {
      "post": {
        "summary": "Batch QR Code Detection",
        "description": "Upload multiple QR code image files for threat analysis in a single request. Each QR code is decoded and checked for phishing, malware, or scam risks.",
        "operationId": "batchDetectQRCodes",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "images": {
                    "type": "array",
                    "items": { "type": "string", "format": "binary" },
                    "description": "Array of QR code image files to analyze."
                  },
                  "threshold": {
                    "type": "number",
                    "description": "Detection sensitivity threshold (0.0 to 1.0)",
                    "default": 0.5,
                    "example": 0.5
                  }
                },
                "required": ["images"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Batch QR code analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "decoded_url": { "type": "string", "description": "The URL extracted from the QR code." },
                          "final_verdict": { "type": "string", "description": "Detection result: 'benign' or 'malicious'" },
                          "confidence_score": { "type": "number", "description": "Detection confidence score (0.0 to 1.0)" },
                          "processing_time_ms": { "type": "number", "description": "Time taken to process the QR code in milliseconds." }
                        },
                        "required": ["decoded_url", "final_verdict", "confidence_score", "processing_time_ms"]
                      }
                    }
                  },
                  "required": ["results"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (missing or invalid parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "examples": {
                  "No Images Provided": { "value": { "detail": "No images provided", "status": 400 } },
                  "Invalid Threshold": { "value": { "detail": "Threshold must be between 0.0 and 1.0", "status": 400 } }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large (file too large)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "One or more files exceed maximum size", "status": 413 }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type (invalid image format)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "One or more files have unsupported format", "status": 415 }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (invalid QR code)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "One or more QR codes could not be decoded", "status": 422 }
              }
            }
          },
          "500": {
            "description": "Internal Server Error (processing error)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "Batch QR code processing failed", "status": 500 }
              }
            }
          }
        }
      }
    },
    "/url-qr-health": {
      "get": {
        "summary": "URL & QR Detection Health Check",
        "description": "Monitor the health and status of the URL and QR code detection services. Use this endpoint to verify that the detection services are running and models are loaded before making detection requests.",
        "operationId": "urlQrHealthCheck",
        "responses": {
          "200": {
            "description": "Health check response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Overall service health status (healthy, degraded, unhealthy)",
                      "example": "healthy"
                    },
                    "models_loaded": {
                      "type": "boolean",
                      "description": "Whether detection models are loaded and ready",
                      "example": true
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "ISO 8601 timestamp when health check was performed"
                    },
                    "version": {
                      "type": "string",
                      "description": "Current version of the detection service",
                      "example": "1.0.0"
                    },
                    "uptime_seconds": {
                      "type": "number",
                      "description": "Service uptime in seconds since last restart",
                      "example": 3600
                    },
                    "memory_usage": {
                      "type": "object",
                      "description": "Memory usage statistics (optional)",
                      "properties": {
                        "total_mb": { "type": "number", "example": 2048 },
                        "used_mb": { "type": "number", "example": 1024 },
                        "available_mb": { "type": "number", "example": 1024 }
                      }
                    }
                  },
                  "required": ["status", "models_loaded", "timestamp", "version", "uptime_seconds", "memory_usage"]
                },
                "example": {
                  "status": "healthy",
                  "models_loaded": true,
                  "timestamp": "2024-01-15T10:30:00Z",
                  "version": "1.0.0",
                  "uptime_seconds": 3600,
                  "memory_usage": {
                    "total_mb": 2048,
                    "used_mb": 1024,
                    "available_mb": 1024
                  }
                }
              }
            }
          }
        }
      }
    },
    "/voice-clone-detection": {
      "post": {
        "summary": "Voice Clone Detection",
        "description": "Upload an audio file for voice clone detection analysis. The service determines if the audio is a synthetic (cloned) voice and returns a verdict and confidence score.",
        "operationId": "detectVoiceClone",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The audio file to be analyzed."
                  },
                  "threshold": {
                    "type": "number",
                    "description": "Detection sensitivity threshold (0.0 to 1.0)",
                    "default": 0.5,
                    "example": 0.5
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Voice clone analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_voice_clone": { "type": "boolean", "description": "Whether the audio is likely a synthetic (cloned) voice based on the threshold." },
                    "confidence_score": { "type": "number", "description": "Detection confidence score (0.0 to 1.0)" },
                    "processing_time_ms": { "type": "number", "description": "Time taken to process the audio in milliseconds." },
                    "model_info": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string", "description": "Model name (e.g., 'voiceguard')" },
                        "version": { "type": "string", "description": "Model version (e.g., 'v1.2')" }
                      },
                      "required": ["name", "version"]
                    }
                  },
                  "required": ["is_voice_clone", "confidence_score", "processing_time_ms", "model_info"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (missing or invalid parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "examples": {
                  "No File Provided": { "value": { "detail": "No file provided", "status": 400 } },
                  "Invalid Threshold": { "value": { "detail": "Threshold must be between 0.0 and 1.0", "status": 400 } }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large (file too large)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "File size exceeds maximum limit", "status": 413 }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type (invalid audio format)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "Unsupported audio format", "status": 415 }
              }
            }
          },
          "500": {
            "description": "Internal Server Error (processing error)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "Audio processing failed", "status": 500 }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "User Registration",
        "description": "Register a new user account with email, password, and personal information. Returns an API key for authenticated access to the detection services.",
        "operationId": "registerUser",
        "servers": [
          {
            "url": "http://3.82.54.197:3001",
            "description": "Registration Server"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "demo@sentinal.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password (will be securely hashed)",
                    "example": "SecurePass123!"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "User's first name",
                    "example": "Demo"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "User's last name",
                    "example": "User"
                  }
                },
                "required": ["email", "password", "firstName", "lastName"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique user identifier"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        }
                      }
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "API key for authenticated requests",
                      "example": "ac2aa777faf1d0e4c65f66c452380074cbf60e2b750b1a8ec2debe10587"
                    }
                  },
                  "required": ["success", "message", "user", "apiKey"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (validation errors)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["Email is required", "Password must be at least 8 characters"]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict (user already exists)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "User with this email already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "User Login",
        "description": "Authenticate a user with email and password. Returns an API key for authenticated access to the detection services.",
        "operationId": "loginUser",
        "servers": [
          {
            "url": "http://3.82.54.197:3001",
            "description": "Registration Server"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "demo@sentinal.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password",
                    "example": "SecurePass123!"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique user identifier"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        }
                      }
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "API key for authenticated requests",
                      "example": "ac2aa777faf1d0e4c65f66c452380074cbf60e2b750b1a8ec2debe10587"
                    }
                  },
                  "required": ["success", "message", "user", "apiKey"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (validation errors)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Email and password are required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid credentials)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid email or password"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/document-fraud-detection": {
      "post": {
        "summary": "Document Fraud Detection",
        "description": "Upload a document image file for fraud detection analysis. The service determines if the document is fraudulent (e.g., tampered, forged, or fake) and returns a verdict and confidence score.",
        "operationId": "detectDocumentFraud",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The document image file to be analyzed."
                  },
                  "threshold": {
                    "type": "number",
                    "description": "Detection sensitivity threshold (0.0 to 1.0)",
                    "default": 0.5,
                    "example": 0.5
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document fraud analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_fraudulent": { "type": "boolean", "description": "Whether the document is likely fraudulent based on the threshold." },
                    "confidence_score": { "type": "number", "description": "Detection confidence score (0.0 to 1.0)" },
                    "processing_time_ms": { "type": "number", "description": "Time taken to process the document in milliseconds." },
                    "model_info": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string", "description": "Model name (e.g., 'docguard')" },
                        "version": { "type": "string", "description": "Model version (e.g., 'v2.0')" }
                      },
                      "required": ["name", "version"]
                    }
                  },
                  "required": ["is_fraudulent", "confidence_score", "processing_time_ms", "model_info"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (missing or invalid parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "examples": {
                  "No File Provided": { "value": { "detail": "No file provided", "status": 400 } },
                  "Invalid Threshold": { "value": { "detail": "Threshold must be between 0.0 and 1.0", "status": 400 } }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large (file too large)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "File size exceeds maximum limit", "status": 413 }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type (invalid document format)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "Unsupported document format", "status": 415 }
              }
            }
          },
          "500": {
            "description": "Internal Server Error (processing error)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": { "type": "string" },
                    "status": { "type": "integer" }
                  }
                },
                "example": { "detail": "Document processing failed", "status": 500 }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FaceSwapAttackRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "example": "{{sampleImageBase64}}"
              },
              "target_face": {
                "type": "string",
                "example": "{{sampleImageBase64}}"
              }
            },
            "required": ["source", "target_face"]
          },
          "task_id": {
            "type": "string",
            "example": "swap-test-1749686174"
          },
          "usecase_environment": {
            "type": "object",
            "properties": {
              "quality": {
                "type": "string",
                "example": "high"
              },
              "blend_ratio": {
                "type": "number",
                "format": "float",
                "example": 0.85
              }
            }
          }
        },
        "required": ["data", "task_id", "usecase_environment"]
      },
      "FaceSwapAttackResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "ai_model_info": {
            "type": "object",
            "properties": {
              "model_name": {
                "type": "string",
                "example": "inswapper_cyn"
              },
              "model_version": {
                "type": "string",
                "example": "v1.0"
              }
            }
          },
          "result": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "image"
              },
              "payload": {
                "type": "string",
                "format": "uri",
                "example": "https://example.com/results/faceswap_output_001.jpg"
              }
            }
          }
        }
      },
      "VoiceCloneAttackRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "voice_sample": {
                "type": "string",
                "example": "{{sampleAudioBase64}}"
              },
              "text_to_synthesize": {
                "type": "string",
                "example": "Hello, this is a test of the voice cloning technology for security testing purposes."
              }
            },
            "required": ["voice_sample", "text_to_synthesize"]
          },
          "task_id": {
            "type": "string",
            "example": "voice-clone-test-1749686183"
          },
          "usecase_environment": {
            "type": "object",
            "properties": {
              "sample_rate": {
                "type": "integer",
                "example": 24000
              },
              "language": {
                "type": "string",
                "example": "en-US"
              },
              "voice_enhancement": {
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "required": ["data", "task_id", "usecase_environment"]
      },
      "VoiceCloneAttackResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "detection_result": {
            "type": "object",
            "properties": {
              "cloned": {
                "type": "boolean",
                "example": true
              },
              "confidence_score": {
                "type": "number",
                "format": "float",
                "example": 1
              },
              "ai_response": {
                "type": "object",
                "properties": {
                  "synthesis_latency_ms": {
                    "type": "integer",
                    "example": 2000
                  }
                }
              }
            }
          },
          "ai_model_info": {
            "type": "object",
            "properties": {
              "model_name": {
                "type": "string",
                "example": "VoiceCloner-Pro"
              },
              "model_version": {
                "type": "string",
                "example": "v2.1"
              }
            }
          },
          "usecase_environment": {
            "$ref": "#/components/schemas/VoiceCloneAttackRequest/properties/usecase_environment"
          },
          "result": {
            "type": "object",
            "properties": {
              "audio": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "base64"
                  },
                  "payload": {
                    "type": "string",
                    "example": "UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA..."
                  }
                }
              },
              "meta": {
                "type": "object",
                "properties": {
                  "duration_ms": {
                    "type": "integer",
                    "example": 1500
                  },
                  "size_bytes": {
                    "type": "integer",
                    "example": 345678
                  }
                }
              }
            }
          }
        }
      },
      "DetectionRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "base64"
              },
              "payload": {
                "type": "string",
                "example": "{{sampleImageBase64}}"
              }
            },
            "required": ["type", "payload"]
          },
          "task_id": {
            "type": "string",
            "example": "detect-faceswap-1749686204"
          },
          "usecase_environment": {
            "type": "object",
            "properties": {
              "detection_threshold": {
                "type": "number",
                "format": "float",
                "example": 0.8
              },
              "analysis_mode": {
                "type": "string",
                "example": "comprehensive"
              }
            }
          }
        },
        "required": ["data", "task_id", "usecase_environment"]
      },
      "DetectionResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "detection_result": {
            "type": "object",
            "properties": {
              "overall_status": {
                "type": "string",
                "example": "NOT_DETECTED"
              },
              "overall_confidence_score": {
                "type": "number",
                "format": "float",
                "example": 0.67
              },
              "face_detections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "filter_prob": {
                      "type": "number",
                      "format": "float"
                    },
                    "faceswap_prob": {
                      "type": "number",
                      "format": "float"
                    },
                    "bounding_box": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "example": [30, 60, 130, 180]
                    }
                  }
                }
              },
              "ai_response": {
                "type": "object",
                "properties": {
                  "analysis_latency_ms": {
                    "type": "integer",
                    "example": 1280
                  },
                  "faces_analyzed_count": {
                    "type": "integer",
                    "example": 2
                  },
                  "notes": {
                    "type": "string",
                    "example": "Multiple faces analyzed. No significant faceswap indicators."
                  }
                }
              }
            }
          },
          "ai_model_info": {
            "type": "object",
            "properties": {
              "model_name": {
                "type": "string",
                "example": "FaceSwapDetector"
              },
              "model_version": {
                "type": "string",
                "example": "v1.2.0"
              }
            }
          },
          "usecase_environment_processed": {
            "type": "object",
            "properties": {
              "detection_threshold": {
                "type": "number",
                "format": "float"
              },
              "zoom_level": {
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      },
      "DocumentDetectionRequest": {
        "type": "object",
        "properties": {
          "image_url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/sample-document.jpg"
          },
          "task_id": {
            "type": "string",
            "example": "detect-fraud-1749686221"
          },
          "usecase_environment": {
            "type": "object",
            "properties": {
              "document_type": {
                "type": "string",
                "example": "identity"
              },
              "detection_threshold": {
                "type": "number",
                "format": "float",
                "example": 0.8
              },
              "metadata_analysis": {
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "required": ["image_url", "task_id", "usecase_environment"]
      },
      "DocumentDetectionResponse": {
        "type": "object",
        "properties": {
          "detections": {
            "type": "object",
            "properties": {
              "meta-data": {
                "type": "object",
                "additionalProperties": true
              },
              "confidence_score": {
                "type": "number",
                "format": "float",
                "example": 0.99
              },
              "ai_response": {
                "type": "string",
                "example": "Metadata analysis reveals inconsistencies suggesting potential tampering."
              }
            }
          },
          "ai_model_info": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "example": "v1.2.0"
              },
              "model_name": {
                "type": "string",
                "example": "DocumentFraudDetector"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "usecase_environment": {
            "type": "object",
            "properties": {
              "detection_threshold": {
                "type": "number"
              },
              "document_type": {
                "type": "string"
              }
            }
          }
        }
      },
      "AIContentDetectionRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "text"
              },
              "payload": {
                "type": "string",
                "example": "This is a sample text that may have been generated by an AI system."
              }
            }
          },
          "task_id": {
            "type": "string",
            "example": "detect-ai-content-1749686221"
          },
          "usecase_environment": {
            "type": "object",
            "properties": {
              "threshold": {
                "type": "number",
                "format": "float",
                "example": 0.5
              },
              "analysis_mode": {
                "type": "string",
                "example": "comprehensive"
              },
              "content_category": {
                "type": "string",
                "example": "article"
              }
            }
          }
        },
        "required": ["data", "task_id", "usecase_environment"]
      },
      "AIContentDetectionResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "result": {
            "type": "object",
            "properties": {
              "confidence_score": {
                "type": "number",
                "format": "float"
              },
              "is_ai_generated": {
                "type": "boolean"
              },
              "analysis_details": {
                "type": "object",
                "properties": {
                  "content_type": {
                    "type": "string"
                  },
                  "processing_time_ms": {
                    "type": "integer"
                  },
                  "model_certainty": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "ai_model_info": {
            "type": "object",
            "properties": {
              "model_name": {
                "type": "string"
              },
              "model_version": {
                "type": "string"
              }
            }
          },
          "usecase_environment_processed": {
            "type": "object",
            "properties": {
              "threshold": {
                "type": "number"
              },
              "analysis_mode": {
                "type": "string"
              },
              "content_category": {
                "type": "string"
              }
            }
          }
        }
      },
      "AIAgentProcessRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "audio_chunk_base64": {
                "type": "string",
                "example": "{{sampleAudioBase64}}"
              },
              "call_id": {
                "type": "string",
                "example": "test-call-1749686197"
              },
              "turn_sequence_id": {
                "type": "integer",
                "example": 1
              }
            }
          },
          "task_id": {
            "type": "string",
            "example": "ai-agent-test-1749686197"
          },
          "usecase_environment": {
            "type": "object",
            "properties": {
              "language_code": {
                "type": "string",
                "example": "en-US"
              },
              "call_type": {
                "type": "string",
                "example": "security_test"
              },
              "agent_mode": {
                "type": "string",
                "example": "defensive"
              }
            }
          }
        },
        "required": ["data", "task_id", "usecase_environment"]
      },
      "AIAgentProcessResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          },
          "call_id": {
            "type": "string"
          },
          "turn_sequence_id": {
            "type": "integer"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "detection_result": {
            "type": "object",
            "properties": {
              "caller_transcript": {
                "type": "string"
              },
              "call_classification": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "confidence_score": {
                    "type": "number",
                    "format": "float"
                  }
                }
              },
              "ai_agent_response": {
                "type": "object",
                "properties": {
                  "text_to_speak": {
                    "type": "string"
                  },
                  "audio_to_play_base64": {
                    "type": "string"
                  },
                  "response_audio_format": {
                    "type": "object",
                    "properties": {
                      "codec": {
                        "type": "string"
                      },
                      "sample_rate_hz": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "ai_model_info": {
            "type": "object",
            "properties": {
              "asr_model_id": {
                "type": "string"
              },
              "llm_model_id": {
                "type": "string"
              },
              "tts_model_id": {
                "type": "string"
              },
              "agent_pipeline_version": {
                "type": "string"
              }
            }
          },
          "usecase_environment_processed": {
            "type": "object",
            "properties": {
              "language_code": {
                "type": "string"
              },
              "call_type": {
                "type": "string"
              },
              "agent_mode": {
                "type": "string"
              }
            }
          }
        }
      },
      "Plant": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": ["id"],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": ["error", "message"],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AIAgentRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The text prompt to analyze or generate a response for.",
            "example": "Summarize the following article..."
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature for response generation (0.0 to 1.0)",
            "default": 0.7,
            "example": 0.7
          }
        },
        "required": ["prompt"]
      },
      "AIAgentResponse": {
        "type": "object",
        "properties": {
          "agent_response": {
            "type": "string",
            "description": "The AI agent's generated response to the prompt.",
            "example": "This article discusses..."
          },
          "confidence_score": {
            "type": "number",
            "description": "Confidence score for the response (0.0 to 1.0)",
            "example": 0.93
          },
          "processing_time_ms": {
            "type": "number",
            "description": "Time taken to process the prompt in milliseconds.",
            "example": 1500
          }
        },
        "required": ["agent_response", "confidence_score", "processing_time_ms"]
      }
    },
     "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  }
}
